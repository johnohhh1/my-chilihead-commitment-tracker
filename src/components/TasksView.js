import React from 'react';
import { ArrowLeft, Check, X, Mail, RotateCcw } from 'lucide-react';
import { taskData } from '../data/taskData';

const TasksView = ({
  selectedFrequency,
  setCurrentView,
  translations: t,
  checklistData,
  setChecklistData,
  gmName,
  getCurrentDateInfo
}) => {
  const tasks = taskData[selectedFrequency] || [];
  const dateInfo = getCurrentDateInfo();
  
  // Real task toggle function
  const toggleTask = (taskIndex) => {
    const today = new Date().toDateString();
    const key = `${selectedFrequency}_${today}`;
    
    setChecklistData(prev => ({
      ...prev,
      [key]: {
        ...prev[key],
        [taskIndex]: !prev[key]?.[taskIndex]
      }
    }));
  };

  // Get completion stats
  const today = new Date().toDateString();
  const key = `${selectedFrequency}_${today}`;
  const completed = Object.values(checklistData[key] || {}).filter(Boolean).length;

  // Reset all tasks
  const resetTasks = () => {
    const today = new Date().toDateString();
    const key = `${selectedFrequency}_${today}`;
    setChecklistData(prev => ({
      ...prev,
      [key]: {}
    }));
  };

  // Generate email
  const generateEmail = () => {
    if (!gmName.trim()) {
      alert('Please enter your GM name first!');
      return;
    }

    const completedTasks = [];
    const incompleteTasks = [];
    
    tasks.forEach((task, index) => {
      if (checklistData[key]?.[index]) {
        completedTasks.push(task);
      } else {
        incompleteTasks.push(task);
      }
    });

    const subject = `🌶️ ChiliHead Commitment Report - ${selectedFrequency.toUpperCase()} - GM: ${gmName}`;
    const timestamp = new Date().toLocaleString();
    const completionPercentage = Math.round((completed / tasks.length) * 100);

    let body = `🌶️ ChiliHead Commitment Report\n\n`;
    body += `General Manager: ${gmName}\n`;
    body += `Fiscal Period: ${dateInfo.fiscalPeriod} | Week: ${dateInfo.fiscalWeek}\n`;
    body += `Task Frequency: ${selectedFrequency.toUpperCase()}\n`;
    body += `Date & Time: ${timestamp}\n`;
    body += `Completion Status: ${completed}/${tasks.length} tasks (${completionPercentage}%)\n\n`;

    if (completedTasks.length > 0) {
      body += `✅ COMPLETED TASKS (${completedTasks.length}):\n`;
      completedTasks.forEach((task, index) => {
        body += `${index + 1}. ${task}\n`;
      });
      body += '\n';
    }

    if (incompleteTasks.length > 0) {
      body += `❌ INCOMPLETE TASKS (${incompleteTasks.length}):\n`;
      incompleteTasks.forEach((task, index) => {
        body += `${index + 1}. ${task}\n`;
      });
      body += '\n';
    }

    body += `Generated by My ChiliHead Commitment Tracker\n`;
    body += `Excellence Through Leadership & Accountability`;

    // Open email client
    const emailUrl = `mailto:chilks605recognition@gmail.com,your.do@email.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    window.location.href = emailUrl;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-blue-600 text-white p-4 shadow-lg">
        <div className="flex items-center justify-between">
          <button
            onClick={() => setCurrentView('home')}
            className="flex items-center text-blue-100 hover:text-white"
          >
            <ArrowLeft className="w-5 h-5 mr-1" />
            {t.back}
          </button>
          <div className="text-center">
            <h1 className="text-xl font-semibold">{t[selectedFrequency]} {t.tasks}</h1>
            <div className="text-sm text-blue-200">
              Period {dateInfo.fiscalPeriod} • Week {dateInfo.fiscalWeek}
            </div>
          </div>
          <button
            onClick={resetTasks}
            className="text-blue-100 hover:text-white"
          >
            <RotateCcw className="w-5 h-5" />
          </button>
        </div>
        
        <div className="mt-2 text-center">
          <div className="text-2xl font-bold">{completed}/{tasks.length}</div>
          <div className="text-blue-200">{t.tasksCompleted}</div>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="bg-white p-4 shadow-sm">
        <div className="w-full bg-gray-200 rounded-full h-4">
          <div
            className="bg-green-500 h-4 rounded-full transition-all duration-300"
            style={{ width: `${(completed / tasks.length) * 100}%` }}
          ></div>
        </div>
        <div className="text-center mt-2 text-sm text-gray-600">
          {Math.round((completed / tasks.length) * 100)}% Complete
        </div>
      </div>

      {/* Tasks List */}
      <div className="p-4 space-y-3">
        {tasks.map((task, index) => {
          const isCompleted = checklistData[key]?.[index] || false;
          
          return (
            <div
              key={index}
              onClick={() => toggleTask(index)}
              className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                isCompleted
                  ? 'bg-green-50 border-green-300'
                  : 'bg-white border-blue-300 hover:border-blue-400'
              }`}
            >
              <div className="flex items-start space-x-3">
                <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center flex-shrink-0 ${
                  isCompleted
                    ? 'bg-green-500 border-green-500'
                    : 'bg-red-500 border-red-500'
                }`}>
                  {isCompleted ? (
                    <Check className="w-5 h-5 text-white" />
                  ) : (
                    <X className="w-5 h-5 text-white" />
                  )}
                </div>
                <div className={`flex-1 text-gray-800 ${isCompleted ? 'line-through opacity-75' : ''}`}>
                  {task}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Submit Button */}
      <div className="p-4 bg-white border-t">
        <button
          onClick={generateEmail}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg flex items-center justify-center space-x-2 transition-colors"
        >
          <Mail className="w-5 h-5" />
          <span>{t.submitVerification}</span>
        </button>
      </div>
    </div>
  );
};

export default TasksView;
